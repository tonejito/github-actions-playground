#	.github/workflows/github-pages.yaml

# Ensure GitLab Pages is enabled
# Create a '.nojekyll' file in the root of the repository

name: build

permissions:
  id-token: write
  contents: read
  pages: write
  deployments: write

on:
  push:
    branches:
    - "main"
    # - "master"
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

jobs:
  prepare:
    runs-on: ubuntu-latest
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup Python
        uses: actions/setup-python@v4.0.0
        with:
          python-version: "3.10"

      - name: Prepare APT configuration
        run: |
          sudo truncate --size=0 /etc/apt/apt.conf.d/99-local
          # echo 'quiet "2";'                   | sudo tee -a /etc/apt/apt.conf.d/99-local
          # echo 'APT::Get::Assume-Yes "1";'    | sudo tee -a /etc/apt/apt.conf.d/99-local
          # echo 'APT::Install-Recommends "0";' | sudo tee -a /etc/apt/apt.conf.d/99-local
          # echo 'APT::Install-Suggests "0";'   | sudo tee -a /etc/apt/apt.conf.d/99-local
          # echo 'APT::Color "0";'              | sudo tee -a /etc/apt/apt.conf.d/99-local
          # echo 'Dpkg::Progress "0";'          | sudo tee -a /etc/apt/apt.conf.d/99-local
          # echo 'Dpkg::Progress-Fancy "0";'    | sudo tee -a /etc/apt/apt.conf.d/99-local
          sudo mkdir -vp /etc/apt/apt.conf.d
          sudo cp -v .github/workflows/apt.local.conf /etc/apt/apt.conf.d/99-local

      - name: Prepare PIP configuration
        run: |
          sudo truncate --size=0 /etc/apt/apt.conf.d/99-local ~/.config/pip/pip.conf
          # sudo pip config --global set global.quiet 1
          # sudo pip config --global set global.progress_bar off
          mkdir -vp ~/.config/pip
          sudo cp -v .github/workflows/pip.conf /etc/pip.conf
          cp -v .github/workflows/pip.conf ~/.config/pip/pip.conf

      - name: Debian APT
        env:
          TERM: linux
          DEBIAN_PRIORITY: critical
          DEBIAN_FRONTEND: noninteractive
          DEBCONF_NOWARNINGS: "yes"
          DEBCONF_TERSE: "yes"
          DEBCONF_NONINTERACTIVE_SEEN: "true"
        run: |
          sudo apt-get -q=2 update
          sudo apt-get -q=2 install make git wget

      # https://pandoc.org/installing.html#linux
      # - name: Install pandoc from TAR
      #   env:
      #     PANDOC_TAR_URL: "https://github.com/jgm/pandoc/releases/download/3.1.2/pandoc-3.1.2-linux-amd64.tar.gz"
      #     PANDOC_TAR: "/tmp/pandoc.tar.gz"
      #   run: |
      #     wget -c -nv -O "${PANDOC_TAR}" "${PANDOC_TAR_URL}"
      #     sudo tar -xzf "${PANDOC_TAR}" --strip-components 1 -C /usr/local
      #     rm -v "${PANDOC_TAR}"
      #     which pandoc
      #     whereis pandoc
      #     pandoc --version

      # https://pandoc.org/installing.html#linux
      # - name: Install pandoc from DEB
      #   env:
      #     PANDOC_DEB_URL: "https://github.com/jgm/pandoc/releases/download/3.1.2/pandoc-3.1.2-1-amd64.deb"
      #     PANDOC_DEB: "/tmp/pandoc.deb"
      #   run: |
      #     wget -c -nv -O "${PANDOC_DEB}" "${PANDOC_DEB_URL}"
      #     sudo dpkg -i "${PANDOC_DEB}"
      #     rm -v "${PANDOC_DEB}"
      #     which pandoc
      #     whereis pandoc
      #     pandoc --version

      # https://github.com/pandoc/actions/tree/main/setup
      # - name: Install pandoc DEB via GitHub actions
      #   uses: pandoc/actions/setup@v1.0.0
      #   with:
      #     version: 3.1

      # - name: Check pandoc
      #   run: |
      #     which pandoc
      #     whereis pandoc
      #     pandoc --version

      - name: Python PIP
        run: |
          pip3 install --user --upgrade pip
          pip3 install --user pre-commit

  check:
    needs: prepare
    runs-on: ubuntu-latest
    steps:
      - name: Run pre-commit
        run: |
          pre-commit install
          make check

  build:
    needs: check
    runs-on: ubuntu-latest
    steps:
      # - name: Build the site with Makefile
      #   run: |
      #     make build

      # https://github.com/pandoc/pandoc-action-example
      # https://hub.docker.com/r/pandoc/extra
      - name: Build the site with pandoc docker image
        # uses: docker://pandoc/extra:3.1
        uses: docker://pandoc/extra:3.1-alpine
        # uses: docker://pandoc/extra:3.1-ubuntu
        with:
          args: >-  # allows you to break string into multiple lines
            --defaults
            pandoc.cfg

  pack:
    needs: build
    runs-on: ubuntu-latest
    steps:
      # Inside the ZIP file there needs to be *only one file* named 'artifact.tar'
      - name: Archive artifact
        shell: bash
        run: |
          tar \
            --dereference --hard-dereference \
            --directory public \
            --exclude=.git \
            --exclude=.gitkeep \
            -cvf ${{ runner.temp }}/artifact.tar \
            .

      - name: Upload artifact
        uses: actions/upload-artifact@v3.1.0
        with:
          name: github-pages
          path: ${{ runner.temp }}/artifact.tar
          if-no-files-found: error
          retention-days: 0

  deploy:
    needs: pack
    runs-on: ubuntu-latest
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:

      # Deploy the contents of 'artifact.tar' to GitHub pages
      - name: Deploy GitHub pages
        id: deployment
        uses: actions/deploy-pages@v1.0.6
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
